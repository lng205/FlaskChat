<!-- 
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->
{% extends 'base.jinja' %}


{% block content %} 
<style>
    nav {
        border-bottom: 1px solid black;
        overflow: auto
    }

    #message_box {
        border: 1px solid black; 
        height: 400px; 
        width: 800px; 
        overflow: auto;
        padding: 2px;
    }

    .text  {
        margin-top: 2px;
        margin-bottom: 2px;
    }

    main {
        display: flex; /* Use Flexbox */
        flex-direction: row; /* Align children in a row */
    }

    #friends_interaction {
        flex-grow: 1; /* Allows the friends section to take up the remaining space */
        padding-left: 20px; /* Optional: Adds some space between the message box and the friends section */
    }

    #friends_list li {
        cursor: pointer;
        padding: 5px 10px;
        margin: 2px;
        border-radius: 5px;
        transition: background-color 0.3s ease, color 0.3s ease;
    }

    #friends_list li:hover {
        background-color: #f0f0f0; /* Light grey background on hover */
        color: #007bff; /* Change text color on hover */
    }

</style>

<!--Navbar, you'll see the username here-->
<nav style="border-bottom: 1px solid black;">
    <ol style="float: right">
        <li style="display:inline-block">Username:  {{ username }} </li>
    </ol>
</nav>

<h1>Messaging App </h1>

<main>
    <div>
    <!-- The messages are displayed here -->
    <section id="message_box"></section>

    <!-- These part ideally should be a form element, 
    but I wrote this code a year ago and I don't want to break anything...-->
    <section id="chat_box">
        <p class="text">Chat with: </p>
        <input id="receiver" placeholder="username">
        <!-- MDN says its bad practice to use the onclick attribute,
        but we're using it anyways coz its easy :)-->
        <button onclick="join_room()">Chat</button>
    </section>

    <!-- The (message) input box is set to display: none initially, 
    this means the input box is "invisible" initially-->
    <section id="input_box" style="display: none" >
        <p class="text">Message: </p>
        <input id="message" placeholder="message">
        <button onclick="send()">Send</button>
        <button onclick="leave()">Leave Room</button>
    </section>
    </div>

    <!-- Friend interactions section -->
    <section id="friends_interaction">
        <!-- View current friends -->
        <div id="current_friends">
            <h2>Current Friends</h2>
            <ul id="friends_list">
                <!-- Dynamic list of friends will be populated here -->
                {% for friend in friends %}
                    <li onclick="startChatWith('{{ friend }}')">{{ friend }}</li>
                {% endfor %}
            </ul>
        </div>

        <!-- View pending friend requests -->
        <div id="pending_requests">
            <h2>Pending Friend Requests</h2>
            <ul id="requests_list">
                <!-- Dynamic list of pending requests will be populated here -->
                {% for friend in pending_friends %}
                    <li>{{ friend }}</li>
                    <!-- Two buttons for confirming and rejecting friend request -->
                    <button onclick="processFriendRequest('{{ friend }}', true)">Confirm</button>
                    <button onclick="processFriendRequest('{{ friend }}', false)">Reject</button>
                {% endfor %}
            </ul>
        </div>

        <!-- Add new friends -->
        <div id="add_friend">
            <h2>Add New Friend</h2>
            <input id="new_friend_username" placeholder="Enter username">
            <button onclick="addFriend()">Add Friend</button>
        </div>
    </section>
</main>

<script src="/static/js/libs/socket.io.min.js"></script>
<script>
    let room_id = 0;

    // when the user presses the "Enter" key inside of the "message box", 
    // the message is sent to the server
    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

    // when the user presses the enter key inside of the "receiver box"
    // the user joins a (socket) room
     $("#receiver").on("keyup", (e) => {
        if (e.key == "Enter") {
            join_room();
        }
    })


    $(document).ready(() => {
        // room_id is undefined if the user hasn't joined a room
        // we early return in this case
        if (Cookies.get("room_id") == undefined) {
            return;
        }

        // the user has already joined an existing room
        // we'll display the message box, instead of the "Chat with: " box
        $("#chat_box").hide();
        $("#input_box").show();
        room_id = parseInt(Cookies.get("room_id"));
    })
    
    // Here's the Socket IO part of the code
    // things get a bit complicated here so brace yourselves :P
    let username = "{{ username }}";

    Cookies.set('username', username);

    // initializes the socket
    const socket = io();

    // an incoming message arrives, we'll add the message to the message box
    socket.on("incoming", (msg, color="black") => {
        console.log("Received message: " + msg);
        // Parse the message in the format of "sender: message"
        let [sender, message] = msg.includes(": ") ? msg.split(": ") : ["", msg];
        if (sender == username) {
            color = "blue";
            add_message(msg, color);
        }
        else if (sender) {
            // Decrypt the message
            decryptMessage(sender, message).then((decryptedMessage) => {
                add_message(sender + ": " + decryptedMessage, color);
            });
        }
        else {
            add_message(msg, color);
        }
    })
    
    // we'll send the message to the server by emitting a "send" event
    async function send() {
        receiver = Cookies.get("receiver");

        let message = $("#message").val();
        $("#message").val("");

        // Encrypt the message
        let encryptedMessage = await encryptMessage(message);

        // Send the encrypted message
        socket.emit("send", username, encryptedMessage, room_id);

        console.log("Sent encrypted message: " + msg);
    }

    // we emit a join room event to the server to join a room
    function join_room() {
       
        let receiver = $("#receiver").val();

        // pass in the receiver of our message to the server
        // as well as the current user's username
        socket.emit("join", username, receiver, (res) => {
            // res is a string with the error message if the error occurs
            // this is a pretty bad way of doing error handling, but watevs
            if (typeof res != "number") {
                alert(res);
                return;
            }

            // set the room id variable to the room id returned by the server
            room_id = res;
            Cookies.set("room_id", room_id);

            // now we'll show the input box, so the user can input their message
            $("#chat_box").hide();
            $("#input_box").show();
        });
        Cookies.set("receiver", receiver);
    }

    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    function leave() {
        Cookies.remove("room_id");
        socket.emit("leave", username, room_id);
        $("#input_box").hide();
        $("#chat_box").show();
    }

    // function to add a message to the message box
    // called when an incoming message has reached a client
    function add_message(message, color) {
        let box = $("#message_box");
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(message);
        box.append(child);
    }
    
    // Create a post request to the server to add a friend
    async function addFriend() {
        let new_friend = $("#new_friend_username").val();
        let addFriendURL = "{{ url_for('add_friend') }}";
        let res = await axios.post(addFriendURL, {
            username: username,
            friend: new_friend
        });

        if (res.data == "success") {
            // Refresh the page to show the new friend
            location.reload();
        } else {
            alert(res.data);
        }
    }

    // Create a post request to the server to process a friend request
    async function processFriendRequest(friend, accept) {
        let confirmFriendURL = "{{ url_for('process_friend_request') }}";
        let res = await axios.post(confirmFriendURL, {
            username: username,
            friend: friend,
            accept: accept
        });

        if (res.data == "success") {
            // Refresh the page to show the new friend
            location.reload();
        } else {
            alert(res.data);
        }
    }

    function startChatWith(friend) {
        // Set the receiver input to the friend's name
        $("#receiver").val(friend);
        // Directly call join_room to start the chat
        join_room();
    }

    // fetch a public key and store it in local storage
    function getPublicKey(username) {
        let key = localStorage.getItem(username + "_pub");
        if (!key) {
            socket.emit("get_key", username, (res) => {
                if (res == "error") {
                    alert("User does not exist");
                    return;
                }
                localStorage.setItem(username + "_pub", res);
                key = res;
            });
        }
        return key;
    }

    async function encryptMessage(message) {
        // Get the public key of the receiver
        const publicKeyBase64 = getPublicKey(Cookies.get("receiver"));
        // Convert base64 encoded public key to an ArrayBuffer
        const publicKeyData = window.atob(publicKeyBase64);
        const publicKeyBuffer = new Uint8Array(publicKeyData.length);
        for (let i = 0; i < publicKeyData.length; i++) {
            publicKeyBuffer[i] = publicKeyData.charCodeAt(i);
        }

        // Import the public key
        const publicKey = await window.crypto.subtle.importKey(
            "spki",
            publicKeyBuffer,
            {
                name: "RSA-OAEP",
                hash: {name: "SHA-256"},
            },
            true,
            ["encrypt"]
        );

        // Convert message to an ArrayBuffer
        const encoder = new TextEncoder();
        const messageBuffer = encoder.encode(message);

        // Encrypt the message
        const encrypted = await window.crypto.subtle.encrypt(
            {name: "RSA-OAEP"},
            publicKey,
            messageBuffer
        );

        // Convert encrypted data to base64
        const encryptedBase64 = window.btoa(String.fromCharCode.apply(null, new Uint8Array(encrypted)));

        // Sign the message
        const privateKeyBase64 = localStorage.getItem(username);
        const privateKeyData = window.atob(privateKeyBase64);
        const privateKeyBuffer = new Uint8Array(privateKeyData.length);
        for (let i = 0; i < privateKeyData.length; i++) {
            privateKeyBuffer[i] = privateKeyData.charCodeAt(i);
        }

        const privateKey = await window.crypto.subtle.importKey(
            "pkcs8",
            privateKeyBuffer,
            {
                name: "RSA-PSS",
                hash: {name: "SHA-256"},
            },
            true,
            ["sign"]
        );

        const signature = await window.crypto.subtle.sign(
            {
                name: "RSA-PSS",
                saltLength: 32,
            },
            privateKey,
            messageBuffer
        );

        const signatureBase64 = window.btoa(String.fromCharCode.apply(null, new Uint8Array(signature)));

        // Return the encrypted message and signature
        return encryptedBase64 + "." + signatureBase64;
    }

    async function decryptMessage(sender, encryptedMessageBase64) {
        // Split the encrypted message and signature
        const [encryptedMessage, signature] = encryptedMessageBase64.split(".");

        // Get the private key from local storage
        const privateKeyBase64 = localStorage.getItem(username);
        // Convert base64 encoded private key to an ArrayBuffer
        const privateKeyData = window.atob(privateKeyBase64);
        const privateKeyBuffer = new Uint8Array(privateKeyData.length);
        for (let i = 0; i < privateKeyData.length; i++) {
            privateKeyBuffer[i] = privateKeyData.charCodeAt(i);
        }

        // Import the private key
        const privateKey = await window.crypto.subtle.importKey(
            "pkcs8",
            privateKeyBuffer,
            {
                name: "RSA-OAEP",
                hash: {name: "SHA-256"},
            },
            true,
            ["decrypt"]
        );

        // Convert base64 encoded encrypted message to an ArrayBuffer
        const encryptedData = window.atob(encryptedMessage);
        const encryptedBuffer = new Uint8Array(encryptedData.length);
        for (let i = 0; i < encryptedData.length; i++) {
            encryptedBuffer[i] = encryptedData.charCodeAt(i);
        }

        // Decrypt the message
        const decrypted = await window.crypto.subtle.decrypt(
            {name: "RSA-OAEP"},
            privateKey,
            encryptedBuffer
        );

        // Convert decrypted data to a string
        const decoder = new TextDecoder();
        const decryptedMessage = decoder.decode(decrypted);

        // Verify the signature
        const publicKeyBase64 = getPublicKey(sender);
        const publicKeyData = window.atob(publicKeyBase64);
        const publicKeyBuffer = new Uint8Array(publicKeyData.length);
        for (let i = 0; i < publicKeyData.length; i++) {
            publicKeyBuffer[i] = publicKeyData.charCodeAt(i);
        }

        const publicKey = await window.crypto.subtle.importKey(
            "spki",
            publicKeyBuffer,
            {
                name: "RSA-PSS",
                hash: {name: "SHA-256"},
            },
            true,
            ["verify"]
        );

        const signatureData = window.atob(signature);
        const signatureBuffer = new Uint8Array(signatureData.length);
        for (let i = 0; i < signatureData.length; i++) {
            signatureBuffer[i] = signatureData.charCodeAt(i);
        }

        const verified = await window.crypto.subtle.verify(
            {
                name: "RSA-PSS",
                saltLength: 32,
            },
            publicKey,
            signatureBuffer,
            decrypted
        );

        if (!verified) {
            return "Message could not be verified";
        }
        return decryptedMessage;
    }
</script>
{% endblock %}
